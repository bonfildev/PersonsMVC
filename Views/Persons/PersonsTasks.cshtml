@model PersonsMVC.Models.PersonsModel

@{
    var jsonTasks = System.Text.Json.JsonSerializer.Serialize(Model.PersonsTasks);
}

<h2>Edit Person</h2>

<form id="personForm">
    <input type="hidden" name="Id" value="@Model.Persons.Id" />
    <label>Name: <input type="text" name="Name" value="@Model.Persons.Name" /></label><br />
    <label>Age: <input type="number" name="Age" value="@Model.Persons.Age" /></label><br />
    <label>Email: <input type="email" name="Email" value="@Model.Persons.Email" /></label>
</form>

<h3>Tasks</h3>
<table id="taskTable">
    <thead>
        <tr><th>Description</th><th>Finished</th><th>Date</th><th>Actions</th></tr>
    </thead>
    <tbody></tbody>
</table>

<button onclick="addRow()">Add Task</button>
<button onclick="saveAll()">Save All</button>

<!-- Dexie library -->
<script src="https://cdn.jsdelivr.net/npm/dexie@3.2.4/dist/dexie.min.js"></script>

<script>
    const personId = @Model.Persons.Id;
    const initialTasks = @Html.Raw(jsonTasks);

    // =====================
    // 1. Dexie Setup
    // =====================
    const db = new Dexie("PersonTasksDB");

    // Create a versioned schema. This defines the "tasks" table and indexes.
    db.version(2).stores({
        tasks: "Idtask, IDPerson" // Idtask = primary key, IDPerson = index so we can filter
    });

    // =====================
    // 2. Initialize DB
    // =====================
    async function init() {
        const count = await db.tasks.where("IDPerson").equals(personId).count();

        // If no tasks for this person are in Dexie, preload them from Razor model
        if (count === 0 && Array.isArray(initialTasks)) {
            await db.tasks.bulkPut(initialTasks);
        }

        // Render tasks into the HTML table
        renderTasks();
    }

    // =====================
    // 3. Render Tasks to Table
    // =====================
    async function renderTasks() {
        const tbody = document.querySelector("#taskTable tbody");
        tbody.innerHTML = "";

        // Get all tasks for this person from Dexie
        const tasks = await db.tasks.where("IDPerson").equals(personId).toArray();

        tasks.forEach(task => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td><input value="${task.Description || ""}" data-id="${task.Idtask}" class="desc" /></td>
                <td><input type="checkbox" ${task.Finished ? "checked" : ""} data-id="${task.Idtask}" class="finished" /></td>
                <td><input type="date" value="${task.RegisterDate?.substring(0,10) || ""}" data-id="${task.Idtask}" class="date" /></td>
                <td><button onclick="deleteTask(${task.Idtask})">Delete</button></td>
            `;
            tbody.appendChild(row);
        });
    }

    // =====================
    // 4. Add a New Row to Dexie
    // =====================
    async function addRow() {
        const newTask = {
            Idtask: Date.now(), // Use timestamp as temporary unique ID
            Description: "",
            Finished: false,
            RegisterDate: new Date().toISOString(),
            IDPerson: personId
        };

        await db.tasks.put(newTask); // Save task in Dexie
        renderTasks();               // Refresh UI
    }

    // =====================
    // 5. Delete a Task
    // =====================
    async function deleteTask(id) {
        await db.tasks.delete(id); // Remove task from Dexie
        renderTasks();             // Refresh UI
    }

    // =====================
    // 6. Save Everything to SQL Server
    // =====================
    async function saveAll() {
        // Update each task from form inputs into Dexie
        const tasks = await db.tasks.where("IDPerson").equals(personId).toArray();

        for (const task of tasks) {
            const row = document.querySelector(`[data-id='${task.Idtask}']`).closest("tr");
            task.Description = row.querySelector(".desc").value;
            task.Finished = row.querySelector(".finished").checked;
            task.RegisterDate = row.querySelector(".date").value;
            await db.tasks.put(task);
        }

        // Get final form data (the person info)
        const formData = new FormData(document.getElementById("personForm"));
        const person = Object.fromEntries(formData.entries());
        person.Age = parseInt(person.Age);

        // Re-get the updated tasks to send to server
        const updatedTasks = await db.tasks.where("IDPerson").equals(personId).toArray();

        // Send all data via POST
        fetch("/Persons/Save", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ persons: person, personsTasks: updatedTasks })
        }).then(res => {
            if (res.ok) alert("Saved!");
        });
    }

    // Run everything on load
    init();
</script>

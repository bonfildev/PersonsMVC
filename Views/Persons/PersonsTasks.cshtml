@model PersonsMVC.Models.PersonsModel

@{
    ViewData["Title"] = "Edit Person";
}

<h2>Edit Person</h2>

<!-- Person Form -->
<form id="personForm">
    <!-- Hidden person ID -->
    <input type="hidden" name="Id" value="@Model.Persons.Id" />

    <!-- Editable fields for the person -->
    <label>Name:</label>
    <input type="text" name="Name" value="@Model.Persons.Name" /><br />

    <label>Age:</label>
    <input type="number" name="Age" value="@Model.Persons.Age" /><br />

    <label>Email:</label>
    <input type="email" name="Email" value="@Model.Persons.Email" /><br />
</form>

<hr />

<!-- Tasks Section -->
<h3>Tasks</h3>
<table id="taskTable" border="1">
    <thead>
        <tr>
            <th>Description</th>
            <th>Finished</th>
            <th>Date</th>
        </tr>
    </thead>
    <tbody>
        <!-- This body will be dynamically filled with tasks -->
    </tbody>
</table>

<!-- Buttons to add task and save everything -->
<button type="button" onclick="addTaskRow()">Add Task</button>
<button type="button" onclick="saveAll()">Save All</button>

<!-- Dexie + JavaScript Logic -->
@section Scripts {
    <!-- Dexie library from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/dexie@3.2.4/dist/dexie.min.js"></script>

    <script>
        // Initialize Dexie and define schema
        const db = new Dexie("PersonsDB");

        // Create a 'tasks' store with primary key Idtask and indexed IDPerson
        db.version(1).stores({
            tasks: "Idtask, IDPerson"
        });

        // Get the current person ID from hidden input
        const personId = parseInt(document.querySelector("input[name='Id']").value);

        // Function to load tasks from IndexedDB on page load
        async function loadTasks() {
            const tasks = await db.tasks.where("IDPerson").equals(personId).toArray();
            const tbody = document.querySelector("#taskTable tbody");
            tbody.innerHTML = ""; // Clear any existing rows

            // Create table rows for each task from Dexie
            for (const task of tasks) {
                appendTaskRow(task);
            }
        }

        // Function to create and append a table row with inputs
        function appendTaskRow(task) {
            const tbody = document.querySelector("#taskTable tbody");
            const row = document.createElement("tr");

            // Generate input fields with current task values
            row.innerHTML = `
                <td><input class="desc" data-id="${task.Idtask}" value="${task.Description || ''}" /></td>
                <td><input type="checkbox" class="finished" data-id="${task.Idtask}" ${task.Finished ? 'checked' : ''} /></td>
                <td><input type="date" class="date" data-id="${task.Idtask}" value="${task.RegisterDate ? task.RegisterDate.split('T')[0] : ''}" /></td>
            `;

            tbody.appendChild(row);
        }

        // Function to add a new task row
        async function addTaskRow() {
            const newId = Date.now(); // Use timestamp as unique ID

            // Create a blank task object
            const task = {
                Idtask: newId,
                Description: "",
                Finished: false,
                RegisterDate: null,
                IDPerson: personId
            };

            // Save it immediately in IndexedDB
            await db.tasks.add(task);

            // Append the task as a new table row
            appendTaskRow(task);
        }

        // Function to save everything (UI → Dexie → Server)
        async function saveAll() {
            const rows = document.querySelectorAll("#taskTable tbody tr");
            const tasks = [];

            // Loop through all rows and collect data
            for (const row of rows) {
                const desc = row.querySelector(".desc");
                const finished = row.querySelector(".finished");
                const date = row.querySelector(".date");

                // Build a task object from input fields
                const task = {
                    Idtask: parseInt(desc.dataset.id),
                    Description: desc.value,
                    Finished: finished.checked,
                    RegisterDate: date.value || null,
                    IDPerson: personId
                };

                // Save/update each task to Dexie
                await db.tasks.put(task);

                tasks.push(task); // Add to array to send to server
            }

            // Serialize person form data
            const formData = new FormData(document.getElementById("personForm"));
            const person = Object.fromEntries(formData.entries());
            person.Age = parseInt(person.Age); // Ensure number

            // Send everything to your backend controller
            fetch("/Persons/SaveModel", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    persons: person,
                    personsTasks: tasks
                })
            }).then(res => {
                if (res.ok) {
                    alert("Saved to SQL Server!");
                } else {
                    alert("Error saving data.");
                }
            }).catch(err => {
                console.error("Fetch error:", err);
                alert("Network or server error");
            });
        }

        // Load tasks when page is ready
        loadTasks();
    </script>
}
